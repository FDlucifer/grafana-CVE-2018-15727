package main

import (
	"golang.org/x/crypto/pbkdf2"
	"crypto/sha256"
	"github.com/Unknwon/com"
	"encoding/hex"
	"github.com/grafana/grafana/pkg/util"
)

func main() {
	secret := ""
	value := "pb00170"



	encrypted := getCookieV4(secret, value)
	println("cookie: " + encrypted)

	encrypted = "8145494b5f4ee8b801ff95c85cced7f21b5b102ea4d6f702f6b27b7f"

	decrypted, err := decryptCookieV4(secret, encrypted)
	if err != nil {
		panic("error: " + err.Error())
	}
	println("decrypted:" + decrypted)
}

func genCookie(secret string, value string) string {
	key := pbkdf2.Key([]byte(secret), []byte(secret), 1000, 16, sha256.New)
	text, err := com.AESGCMEncrypt(key, []byte(value))
	if err != nil {
		panic("error encrypting cookie: " + err.Error())
	}
	return hex.EncodeToString(text)
}

func genCookieV5(secret string, value string) string {
	return genCookie(secret, value)
}

func getCookieV4(secret string, value string) string {
	return genCookie(util.EncodeMd5(secret), value)
}

func decryptCookieV4(secret string, cookie string) (string, error) {
	return decryptCookie(util.EncodeMd5(secret), cookie)
}

func decryptCookie(secret string, cookie string) (string, error) {
	text, err := hex.DecodeString(cookie)
	if err != nil {
		return "", nil
	}

	key := pbkdf2.Key([]byte(secret), []byte(secret), 1000, 16, sha256.New)
	text, err = com.AESGCMDecrypt(key, text)
	return string(text), err
}